/*
 * Copyright 2021 Marcin Bukowiecki.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */

package com.bukowiecki.regdebug.parsers

import org.junit.Assert
import org.junit.Test

/**
 * @author Marcin Bukowiecki
 */
class RegistersParserTest {

    @Test
    fun testParseSuccess1() {
        val content = """
            General Purpose Registers:
                   rax = 0x00007ff9efd14080  std::basic_ostream<char,std::char_traits<char> > std::cout
                   rbx = 0x0000000000000000
                   rcx = 0x0000006a9d2ffb04
                   rdx = 0x00007ff9ea2e3c78  
                   rdi = 0x0000006a9d2ffb20
                   rsi = 0x0000000000000000
                   rbp = 0x0000000000000000
                   rsp = 0x0000006a9d2ffad0
                    r8 = 0x0000000000000003
                    r9 = 0x0000006a9d2ff8d8
                   r10 = 0x0000000000000014
                   r11 = 0x0000000000000246
                   r12 = 0x0000000000000000
                   r13 = 0x0000000000000000
                   r14 = 0x0000000000000000
                   r15 = 0x0000000000000000
                   rip = 0x00007ff7f2101526  untitled1.exe`test(int *) + 6 at main.cpp:4
                eflags = 0b0000000000000000000000000000000000000000000000000000001000000110

            Floating Point Registers:
                  xmm0 = {0x0000000000000000 0x0000000000000000}
                  xmm1 = {0x0000000000000000 0x0000000000000000}
                  xmm2 = {0x0000000000000000 0x0000000000000000}
                  xmm3 = {0x0000000000000000 0x0000000000000000}
                  xmm4 = {0x0000000000000000 0x0000000000000000}
                  xmm5 = {0x0000000000000000 0x0000000000000000}
                  xmm6 = {0x0000000000000000 0x0000000000000000}
                  xmm7 = {0x0000000000000000 0x0000000000000000}
                  xmm8 = {0x0000000000000000 0x0000000000000000}
                  xmm9 = {0x0000000000000000 0x0000000000000000}
                 xmm10 = {0x0000000000000000 0x0000000000000000}
                 xmm11 = {0x0000000000000000 0x0000000000000000}
                 xmm12 = {0x0000000000000000 0x0000000000000000}
                 xmm13 = {0x0000000000000000 0x0000000000000000}
                 xmm14 = {0x0000000000000000 0x0000000000000000}
                 xmm15 = {0x0000000000000000 0x0000000000000000}


        """.trimIndent()

        val result = RegistersParser.parse(content)
        Assert.assertNotNull(result)
        Assert.assertEquals(GeneralPurposeRegister(
            "eflags",
            "0b0000000000000000000000000000000000000000000000000000001000000110",
            ""), result.generalPurpose.registers.last())
    }

    @Test
    fun testMacParse1() {
        val content = """
            
General Purpose Registers:
       rax = 0x00007fff88b8bde0  libc++.1.dylib`std::__1::cout
       rbx = 0x0000000000000000
       rcx = 0x00007fff88b8bde0  libc++.1.dylib`std::__1::cout
       rdx = 0x0000000000000000
       rdi = 0x00007ffeec9fc9e0
       rsi = 0x00000000000120a8
       rbp = 0x00007ffeec9fca80
       rsp = 0x00007ffeec9fca60
        r8 = 0x00000000000130a8
        r9 = 0x00007fff88bbdcd8  __sFX + 248
       r10 = 0x0000000000000000
       r11 = 0x00000000ffffff00
       r12 = 0x0000000000000000
       r13 = 0x0000000000000000
       r14 = 0x0000000000000000
       r15 = 0x0000000000000000
       rip = 0x00000001032061ff  untitled`main + 63 at main.cpp:11:18
    rflags = 0x0000000000000206
        cs = 0x000000000000002b
        fs = 0x0000000000000000
        gs = 0x0000000000000000
       eax = 0x88b8bde0
       ebx = 0x00000000
       ecx = 0x88b8bde0
       edx = 0x00000000
       edi = 0xec9fc9e0
       esi = 0x000120a8
       ebp = 0xec9fca80
       esp = 0xec9fca60
       r8d = 0x000130a8
       r9d = 0x88bbdcd8
      r10d = 0x00000000
      r11d = 0xffffff00
      r12d = 0x00000000
      r13d = 0x00000000
      r14d = 0x00000000
      r15d = 0x00000000
        ax = 0xbde0
        bx = 0x0000
        cx = 0xbde0
        dx = 0x0000
        di = 0xc9e0
        si = 0x20a8
        bp = 0xca80
        sp = 0xca60
       r8w = 0x30a8
       r9w = 0xdcd8
      r10w = 0x0000
      r11w = 0xff00
      r12w = 0x0000
      r13w = 0x0000
      r14w = 0x0000
      r15w = 0x0000
        ah = 0xbd
        bh = 0x00
        ch = 0xbd
        dh = 0x00
        al = 0xe0
        bl = 0x00
        cl = 0xe0
        dl = 0x00
       dil = 0xe0
       sil = 0xa8
       bpl = 0x80
       spl = 0x60
       r8l = 0xa8
       r9l = 0xd8
      r10l = 0x00
      r11l = 0x00
      r12l = 0x00
      r13l = 0x00
      r14l = 0x00
      r15l = 0x00

Floating Point Registers:
     fctrl = 0x037f
     fstat = 0x0000
      ftag = 0x0000
       fop = 0x0000
     fioff = 0x00000000
     fiseg = 0x0000
     fooff = 0x00000000
     foseg = 0x0000
     mxcsr = 0x00001f80
  mxcsrmask = 0x0000ffff
     stmm0 = {0x37 0xcd 0x02 0x00 0x00 0x00 0x00 0x00 0xff 0xff}
     stmm1 = {0xef 0x1b 0x35 0xed 0xff 0xff 0x01 0x00 0xff 0xff}
     stmm2 = {0xff 0xff 0x01 0x00 0x00 0x00 0x00 0x00 0xff 0xff}
     stmm3 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     stmm4 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     stmm5 = {0x84 0xff 0x73 0xff 0x00 0x00 0x00 0x00 0xff 0xff}
     stmm6 = {0xba 0x29 0xbf 0x01 0x00 0x00 0x00 0x00 0xff 0xff}
     stmm7 = {0x00 0x00 0x70 0xff 0x00 0x00 0x00 0x00 0xff 0xff}
      ymm0 = {0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm1 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm2 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm3 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm4 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm5 = {0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm6 = {0x61 0x45 0xf5 0x0d 0x90 0x7f 0x7b 0x08 0x2e 0xd4 0x01 0x98 0x09 0xc1 0xe1 0xe9 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm7 = {0x85 0xac 0x30 0xee 0xde 0x12 0x3c 0x16 0x41 0x1b 0x92 0x85 0xe0 0xa6 0x6d 0xad 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm8 = {0x9f 0x50 0x8d 0x49 0x88 0xf2 0xa8 0x65 0x5a 0x03 0xbf 0x49 0x4a 0x7a 0xc8 0x3c 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      ymm9 = {0xa2 0xe5 0x09 0xfb 0x76 0x0c 0x7b 0x54 0x2a 0x70 0x5f 0xc8 0x52 0x83 0xbe 0x4e 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm10 = {0x07 0xe3 0x7e 0x37 0x5d 0xa0 0x0b 0x9a 0xc9 0x59 0x40 0xdf 0x3b 0x0c 0x6d 0x2e 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm11 = {0x84 0x48 0xa0 0x85 0x22 0x2e 0x0d 0xf4 0xc5 0x53 0x32 0x00 0xc2 0x88 0x60 0x59 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm12 = {0x22 0x27 0xae 0xfc 0x7f 0x87 0xa5 0x66 0xb6 0xde 0xe5 0xb9 0x8d 0xd2 0x88 0x97 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm13 = {0x35 0x8c 0x28 0xd8 0x17 0xa2 0x25 0x2c 0xd2 0xf1 0x17 0x2c 0x10 0x79 0x77 0x75 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm14 = {0xe8 0x91 0x5b 0x61 0x97 0x16 0xfe 0x07 0x21 0xc8 0x1b 0xbe 0xac 0x1a 0x93 0x29 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
     ymm15 = {0xaf 0xca 0x6b 0x0c 0x3f 0x1d 0x25 0x2e 0xec 0x43 0xd4 0xd5 0xec 0x61 0x5c 0xc0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm0 = {0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a 0x0a}
      xmm1 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm2 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm3 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm4 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm5 = {0x02 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
      xmm6 = {0x61 0x45 0xf5 0x0d 0x90 0x7f 0x7b 0x08 0x2e 0xd4 0x01 0x98 0x09 0xc1 0xe1 0xe9}
      xmm7 = {0x85 0xac 0x30 0xee 0xde 0x12 0x3c 0x16 0x41 0x1b 0x92 0x85 0xe0 0xa6 0x6d 0xad}
      xmm8 = {0x9f 0x50 0x8d 0x49 0x88 0xf2 0xa8 0x65 0x5a 0x03 0xbf 0x49 0x4a 0x7a 0xc8 0x3c}
      xmm9 = {0xa2 0xe5 0x09 0xfb 0x76 0x0c 0x7b 0x54 0x2a 0x70 0x5f 0xc8 0x52 0x83 0xbe 0x4e}
     xmm10 = {0x07 0xe3 0x7e 0x37 0x5d 0xa0 0x0b 0x9a 0xc9 0x59 0x40 0xdf 0x3b 0x0c 0x6d 0x2e}
     xmm11 = {0x84 0x48 0xa0 0x85 0x22 0x2e 0x0d 0xf4 0xc5 0x53 0x32 0x00 0xc2 0x88 0x60 0x59}
     xmm12 = {0x22 0x27 0xae 0xfc 0x7f 0x87 0xa5 0x66 0xb6 0xde 0xe5 0xb9 0x8d 0xd2 0x88 0x97}
     xmm13 = {0x35 0x8c 0x28 0xd8 0x17 0xa2 0x25 0x2c 0xd2 0xf1 0x17 0x2c 0x10 0x79 0x77 0x75}
     xmm14 = {0xe8 0x91 0x5b 0x61 0x97 0x16 0xfe 0x07 0x21 0xc8 0x1b 0xbe 0xac 0x1a 0x93 0x29}
     xmm15 = {0xaf 0xca 0x6b 0x0c 0x3f 0x1d 0x25 0x2e 0xec 0x43 0xd4 0xd5 0xec 0x61 0x5c 0xc0}

Exception State Registers:
    trapno = 0x00000003
       err = 0x00000000
  faultvaddr = 0x00000001032061c0  untitled`main at main.cpp:7


        """.trimIndent()

        val result = RegistersParser.parse(content)
        Assert.assertNotNull(result)
        Assert.assertEquals(GeneralPurposeRegister(
            "r15l",
            "0x00",
            ""), result.generalPurpose.registers.last())

        Assert.assertEquals(ExceptionStateRegister(
            "faultvaddr",
            "0x00000001032061c0",
            "untitled`main at main.cpp:7"), result.exceptionState.registers.last())
    }

    @Test
    fun testParseSuccess3() {
        val content = ""

        val result = RegistersParser.parse(content)
        Assert.assertNotNull(result)
    }
}